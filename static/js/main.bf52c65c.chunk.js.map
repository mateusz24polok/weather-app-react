{"version":3,"sources":["components/pages/MainPage/styled.tsx","assets/images/weather_background.jpg","components/atoms/WeatherIcon/index.tsx","components/organisms/WeatherDetails/styled.tsx","slices/WeatherSlice.ts","helpers/temperatureFunctions.ts","components/atoms/LoadingSpinner/styled.tsx","components/atoms/LoadingSpinner/index.tsx","components/molecules/ErrorInfo/index.tsx","components/organisms/WeatherDetails/index.tsx","components/atoms/Title/styled.tsx","components/atoms/Title/index.tsx","components/atoms/SearchInput/styled.tsx","components/atoms/SearchInput/index.tsx","components/pages/MainPage/index.tsx","App.tsx","styles/GlobalStyle.ts","axios/axiosInstance.ts","api/api.ts","sagas/weatherSaga.ts","sagas/rootSaga.ts","store.ts","index.tsx","styles/theme.ts"],"names":["BackgroundColor","styled","div","BackgroundImage","img","WeatherIcon","IconLink","AltDescription","src","alt","Container","theme","colors","contours","$loading","css","City","p","IconAndTemperatureContainer","Temperature","DetailsContainer","DetailsBox","DetailsText","detailsText","right","WeatherSlice","createSlice","name","initialState","error","errorState","errorCity","loading","city","weather","country","description","humidity","icon","temperature","windSpeed","reducers","typeCity","state","action","payload","fetchWeather","fetchWeatherSuccess","main","temp","wind","speed","fetchWeatherError","selectWeatherSliceState","selectInputCity","selectWeather","selectLoadingState","selectErrorState","selectErrorCity","actions","getCelsiusTemperature","kelvinDegree","toFixed","getFahrenheitTemperature","BaseWheel","loadingSpinnerBorder","RotatingQuarter","loadingSpinnerInterior","LoadingSpinner","ErrorInfo","ErrorCity","useSelector","WeatherDetails","loadingState","weatherIconLink","today","Date","toDateString","StyledTitle","h1","Title","title","useStyles","makeStyles","createStyles","root","padding","display","alignItems","width","margin","input","marginLeft","spacing","flex","iconButton","SearchInput","dispatch","useDispatch","classes","Paper","component","className","onSubmit","event","preventDefault","InputBase","onChange","currentTarget","value","placeholder","inputProps","IconButton","type","aria-label","MainPage","useEffect","WeatherBackgroundImage","App","createGlobalStyle","axios","create","baseURL","getWeather","a","get","weatherData","data","console","fetchWeatherWorker","weatherSaga","call","Error","delay","put","takeLatest","rootSaga","all","saga","createSaga","store","configureStore","reducer","middleware","run","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.bf52c65c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const BackgroundColor = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: black;\r\n  filter: opacity(0.75);\r\n  z-index: -1;\r\n`;\r\n\r\nexport const BackgroundImage = styled.img`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  object-fit: cover;\r\n  z-index: -2;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/weather_background.0806e7bb.jpg\";","import React from \"react\";\r\n\r\ninterface WeatherIconProps{\r\n    IconLink: string,\r\n    AltDescription: string,\r\n}\r\n\r\nconst WeatherIcon: React.FC<WeatherIconProps> = ({IconLink, AltDescription}) => {\r\n    return(\r\n        <div>\r\n            <img src={IconLink} alt={AltDescription}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherIcon;","import styled, { css } from \"styled-components\";\r\n\r\ntype DetailTextProps = {\r\n  right?: boolean;\r\n};\r\n\r\ntype ContainerProps = {\r\n  $loading?: boolean;\r\n};\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  border: 2px solid ${({ theme }) => theme.colors.contours};\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 30px 10px;\r\n  min-height: 280px;\r\n\r\n  ${({$loading}) => $loading && css`\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n  `}\r\n`;\r\n\r\nexport const City = styled.p`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  margin-bottom: 0;\r\n`;\r\n\r\nexport const IconAndTemperatureContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Temperature = styled(City)`\r\n  margin: 0 0 10px 0;\r\n`;\r\n\r\nexport const DetailsContainer = styled(IconAndTemperatureContainer)`\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const DetailsBox = styled.div`\r\n  padding: 10px 40px;\r\n`;\r\n\r\nexport const DetailsText = styled.p<DetailTextProps>`\r\n  font-size: 14px;\r\n  color: ${({ theme }) => theme.colors.detailsText};\r\n  text-align: ${({ right }) => (right ? \"right\" : \"left\")};\r\n`;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Weather, Error } from \"../types/types\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface stateType {\r\n  error: Error;\r\n  loading: boolean;\r\n  city: string;\r\n  weather: Weather;\r\n}\r\n\r\nconst initialState: stateType = {\r\n  error: {\r\n    errorState: false,\r\n    errorCity: \"\",\r\n  },\r\n  loading: false,\r\n  city: \"\",\r\n  weather: {\r\n    city: null,\r\n    country: null,\r\n    description: null,\r\n    humidity: null,\r\n    icon: null,\r\n    temperature: null,\r\n    windSpeed: null,\r\n  },\r\n};\r\n\r\nconst WeatherSlice = createSlice({\r\n  name: \"weather\",\r\n  initialState,\r\n  reducers: {\r\n    typeCity: (state, action: PayloadAction<string>) => {\r\n      state.city = action.payload;\r\n    },\r\n\r\n    fetchWeather: (state, action: PayloadAction<string>) => {\r\n      state.loading = true;\r\n    },\r\n\r\n    fetchWeatherSuccess: (state, action: PayloadAction<any>) => {\r\n      state.city = \"\";\r\n      state.error.errorState = false;\r\n      state.loading = false;\r\n      state.weather = {\r\n        city: action.payload?.name,\r\n        country: action.payload?.country,\r\n        description: action.payload?.weather[0]?.description,\r\n        humidity: action.payload?.main?.humidity,\r\n        icon: action.payload?.weather[0]?.icon,\r\n        temperature: action.payload?.main?.temp,\r\n        windSpeed: action.payload?.wind?.speed,\r\n      };\r\n    },\r\n\r\n    fetchWeatherError: (state, action: PayloadAction<string>) => {\r\n      state.error.errorState = true;\r\n      state.error.errorCity = action.payload;\r\n      state.loading = false;\r\n      state.city = \"\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectWeatherSliceState = (state: RootState) => state.weather;\r\nexport const selectInputCity = (state: RootState) =>\r\n  selectWeatherSliceState(state).city;\r\nexport const selectWeather = (state: RootState) =>\r\n  selectWeatherSliceState(state).weather;\r\nexport const selectLoadingState = (state: RootState) =>\r\n  selectWeatherSliceState(state).loading;\r\nexport const selectErrorState = (state: RootState) =>\r\n  selectWeatherSliceState(state).error.errorState;\r\nexport const selectErrorCity = (state: RootState) =>\r\n  selectWeatherSliceState(state).error.errorCity;\r\n\r\nexport const {\r\n  typeCity,\r\n  fetchWeather,\r\n  fetchWeatherSuccess,\r\n  fetchWeatherError,\r\n} = WeatherSlice.actions;\r\n\r\nexport default WeatherSlice.reducer;\r\n","export const getCelsiusTemperature = (kelvinDegree: number | null) => {\r\n  if (typeof kelvinDegree === \"number\") {\r\n    const celsiusDegree = kelvinDegree - 273.15;\r\n    return celsiusDegree.toFixed(2);\r\n  }\r\n};\r\n\r\nexport const getFahrenheitTemperature = (kelvinDegree: number | null) => {\r\n  if (typeof kelvinDegree === \"number\") {\r\n    const fahrenheitDegree = (kelvinDegree * 9) / 5 - 459.67;\r\n    return fahrenheitDegree.toFixed(2);\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const BaseWheel = styled.div`\r\n  position: relative;\r\n  margin: 0 auto;\r\n  width: 90px;\r\n  height: 90px;\r\n  border-radius: 50%;\r\n  border: 12px solid ${({ theme }) => theme.colors.loadingSpinnerBorder};\r\n  background-color: transparent;\r\n`;\r\n\r\nexport const RotatingQuarter = styled.div`\r\n  width: 45px;\r\n  height: 45px;\r\n  transform: translate(-12px, -12px) rotateZ(0deg);\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 45px;\r\n  border-top-right-radius: 100%;\r\n  border: 12px solid ${({ theme }) => theme.colors.loadingSpinnerInterior};\r\n  border-bottom: none;\r\n  border-left: none;\r\n  animation: rotatingAnimation 1s infinite linear;\r\n  transform-origin: 0 100%;\r\n\r\n  @keyframes rotatingAnimation {\r\n    from {\r\n      transform: translate(-12px, -12px) rotateZ(0);\r\n    }\r\n\r\n    to {\r\n      transform: translate(-12px, -12px) rotateZ(360deg);\r\n    }\r\n  } ;\r\n`;\r\n","import React from \"react\";\r\nimport { BaseWheel, RotatingQuarter } from \"./styled\";\r\n\r\nconst LoadingSpinner: React.FC = () => {\r\n  return (\r\n      <BaseWheel>\r\n        <RotatingQuarter />\r\n      </BaseWheel>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectErrorCity } from \"../../../slices/WeatherSlice\";\r\n\r\nconst ErrorInfo: React.FC = () => {\r\n  const ErrorCity = useSelector(selectErrorCity);\r\n  return (\r\n    <>\r\n      {ErrorCity === \"\" ? (\r\n        <p>Error - something went wrong</p>\r\n      ) : (\r\n        <p>\r\n          Error - something went wrong - Propably there is no city like{\" \"}\r\n          {ErrorCity}\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorInfo;\r\n","import React from \"react\";\r\nimport WeatherIcon from \"../../atoms/WeatherIcon\";\r\nimport {\r\n  Container,\r\n  City,\r\n  DetailsContainer,\r\n  IconAndTemperatureContainer,\r\n  Temperature,\r\n  DetailsText,\r\n  DetailsBox,\r\n} from \"./styled\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  selectWeather,\r\n  selectLoadingState,\r\n  selectErrorState,\r\n} from \"../../../slices/WeatherSlice\";\r\nimport {\r\n  getCelsiusTemperature,\r\n  getFahrenheitTemperature,\r\n} from \"../../../helpers/temperatureFunctions\";\r\nimport LoadingSpinner from \"../../atoms/LoadingSpinner\";\r\nimport ErrorInfo from \"../../molecules/ErrorInfo/\";\r\n\r\nconst WeatherDetails: React.FC = () => {\r\n  const weather = useSelector(selectWeather);\r\n  const loadingState = useSelector(selectLoadingState);\r\n  const errorState = useSelector(selectErrorState);\r\n\r\n  const weatherIconLink = `http://openweathermap.org/img/wn/${weather.icon}@2x.png`;\r\n\r\n  const today = new Date().toDateString();\r\n\r\n  return (\r\n    <Container $loading={loadingState}>\r\n      {loadingState ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <>\r\n          {errorState ? (\r\n            <ErrorInfo />\r\n          ) : (\r\n            <>\r\n              <City>\r\n                {weather.city} {weather.country}\r\n              </City>\r\n              <IconAndTemperatureContainer>\r\n                <WeatherIcon\r\n                  IconLink={weatherIconLink}\r\n                  AltDescription=\"cloudy weather\"\r\n                />\r\n                <Temperature>\r\n                  {`${getCelsiusTemperature(\r\n                    weather.temperature\r\n                  )}°C | ${getFahrenheitTemperature(weather.temperature)}°F`}\r\n                </Temperature>\r\n              </IconAndTemperatureContainer>\r\n              <DetailsContainer>\r\n                <DetailsBox>\r\n                  <DetailsText>Wind: {weather.windSpeed}</DetailsText>\r\n                  <DetailsText>Humidity: {weather.humidity} %</DetailsText>\r\n                </DetailsBox>\r\n                <DetailsBox>\r\n                  <DetailsText right>{today}</DetailsText>\r\n                  <DetailsText right>{weather.description}</DetailsText>\r\n                </DetailsBox>\r\n              </DetailsContainer>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTitle = styled.h1`\r\n    font-size: 36px;\r\n    font-weight: 700;\r\n    text-align: center;\r\n`","import React from \"react\";\r\nimport { StyledTitle } from \"./styled\";\r\n\r\ninterface TitleProps {\r\n  title: string;\r\n}\r\n\r\nconst Title: React.FC<TitleProps> = ({ title }) => {\r\n  return <StyledTitle>{title}</StyledTitle>;\r\n};\r\n\r\nexport default Title;\r\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: \"2px 4px\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      width: 400,\r\n      margin: \"0 auto\",\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      flex: 1,\r\n    },\r\n    iconButton: {\r\n      padding: 10,\r\n    },\r\n  })\r\n);\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { useStyles } from \"./styled\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectInputCity, typeCity, fetchWeather } from \"../../../slices/WeatherSlice\";\r\n\r\nconst SearchInput: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const city = useSelector(selectInputCity);\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (event:React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    dispatch(typeCity(event.currentTarget.value));\r\n  };\r\n\r\n  const handleCitySearch = (event: React.FormEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    dispatch(fetchWeather(city));\r\n  }\r\n\r\n  return (\r\n    <Paper component=\"form\" className={classes.root} onSubmit={handleCitySearch}>\r\n      <InputBase\r\n        onChange={handleInputChange}\r\n        value={city}\r\n        className={classes.input}\r\n        placeholder=\"Enter Your City...\"\r\n        inputProps={{ \"aria-label\": \"enter your city\" }}\r\n      />\r\n      <IconButton\r\n        type=\"submit\"\r\n        className={classes.iconButton}\r\n        aria-label=\"search\"\r\n      >\r\n        <SearchIcon />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React, { useEffect } from \"react\";\r\nimport { BackgroundColor, BackgroundImage } from \"./styled\";\r\nimport WeatherBackgroundImage from \"../../../assets/images/weather_background.jpg\";\r\nimport WeatherDetails from \"../../organisms/WeatherDetails\";\r\nimport Title from \"../../atoms/Title\";\r\nimport SearchInput from \"../../atoms/SearchInput\";\r\nimport { fetchWeather } from \"../../../slices/WeatherSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst MainPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchWeather(\"Melbourne\"));\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      <Title title=\"The Weather App\" />\r\n      <SearchInput />\r\n      <WeatherDetails />\r\n      <BackgroundImage\r\n        src={WeatherBackgroundImage}\r\n        alt=\"weather background image\"\r\n      />\r\n      <BackgroundColor />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"./components/pages/MainPage\";\n\nconst App: React.FC = () => {\n  return (\n    <MainPage>\n      <h1>Here will be root of weather app</h1>\n    </MainPage>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n        font-family: \"Roboto\", sans-serif;\r\n        color: ${({ theme }) => theme.colors.contours}\r\n    }\r\n\r\n    *, ::after, ::before{\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n        padding: 20px;\r\n    }\r\n`;\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://api.openweathermap.org/data/2.5/\",\r\n});\r\n","import axios from \"../axios/axiosInstance\";\r\n\r\nconst key = \"9846a286c520f631c0095b92d0ac8d0e\";\r\n\r\nexport const getWeather = async (city: string) => {\r\n  try {\r\n    const weatherData = await axios.get(`weather?q=${city}&appid=${key}`);\r\n    return weatherData.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { takeLatest, call, put, delay } from \"redux-saga/effects\";\r\nimport {\r\n  fetchWeather,\r\n  fetchWeatherSuccess,\r\n  fetchWeatherError,\r\n} from \"../slices/WeatherSlice\";\r\nimport { getWeather } from \"../api/api\";\r\nimport { PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nfunction* fetchWeatherWorker(action: PayloadAction<string>) {\r\n  try {\r\n    const weather = yield call(getWeather, action.payload);\r\n    if (!weather) {\r\n      throw new Error(\"API fail\");\r\n    }\r\n    yield delay(500);\r\n    yield put(fetchWeatherSuccess(weather));\r\n  } catch (error) {\r\n    yield put(fetchWeatherError(action.payload));\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function* weatherSaga() {\r\n  yield takeLatest(fetchWeather.type, fetchWeatherWorker);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { weatherSaga } from \"./weatherSaga\";\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n      weatherSaga(),\r\n  ]);\r\n};\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport WeatherSlice from \"./slices/WeatherSlice\";\r\nimport createSaga from \"redux-saga\";\r\nimport { rootSaga } from \"./sagas/rootSaga\";\r\n\r\nconst saga = createSaga();\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    weather: WeatherSlice,\r\n  },\r\n  middleware: [saga],\r\n});\r\n\r\nsaga.run(rootSaga);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\nimport { theme } from \"./styles/theme\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\ndeclare module \"styled-components\" {\r\n  export interface DefaultTheme {\r\n    colors: {\r\n      contours: string;\r\n      detailsText: string;\r\n      loadingSpinnerInterior: string;\r\n      loadingSpinnerBorder: string;\r\n    };\r\n  }\r\n}\r\n\r\nexport const theme: DefaultTheme = {\r\n  colors: {\r\n    contours: \"white\",\r\n    detailsText: \"#E1DCDB\",\r\n    loadingSpinnerInterior: \"#7D7D7D\",\r\n    loadingSpinnerBorder: \"#F1EEEE\",\r\n  },\r\n};\r\n"],"sourceRoot":""}